@using CommandPatternDemo.Commands  
@using CommandPatternDemo.Service  

@inject CommandManager CommandManager  
@inject ShortcutManager ShortcutManager  

<style>

    /* Add this to your existing styles */
    .ios-btn, .ios-box {
        -webkit-user-select: none; /* Safari */
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* IE10+/Edge */
        user-select: none; /* Standard */
        -webkit-tap-highlight-color: transparent; /* Remove tap highlight on iOS */
    }

    /* For Android devices */
    .ios-btn, .ios-box {
        -webkit-touch-callout: none; /* Disable callout on long-touch */
    }

    /* iOS Style Classes */
    .ios-container {
        display: flex;
        height: 100vh;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
    }

    .ios-canvas-panel {
        outline: none;
        width: 100%;
        height: 100%;
        position: relative;
        
    }

    .ios-toolbar {
        display: flex;
        /* flex-wrap: wrap; */
        gap: 12px;
        /* padding: 16px; */
        /* background: #FFFFFF; */
        border-radius: 12px;
        box-shadow: 0 4px 12px rgb(0 0 0 / 0%);
        margin-bottom: 20px;
        position: fixed;
        top: 16px;
        left: 49px;
        z-index: 1;
    }

    .ios-button-group {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        padding: 10px;
        border-radius: 10px;
        background: rgba(0, 0, 0, 0.02);
        backdrop-filter: blur(9px);
        border: 0 4px 12px rgb(0 0 0 / 0%);
        box-shadow: -2px 3px 12px rgb(0 0 0 / 35%);
    }

    .ios-group-title {
        width: 100%;
        font-size: 12px;
        font-weight: 600;
        color: #8E8E93;
        margin-bottom: 6px;
        padding-left: 4px;
    }

    .ios-btn {
        padding: 10px 16px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        white-space: nowrap;
    }

    .ios-btn-primary {
        background-color: #3b8bff;
        color: #ffffff;
    }

    .ios-btn-primary:active {
        background-color: #0062CC;
    }

    .ios-btn-secondary {
        background-color: #3b8bff;
        color: #ffffff;
    }

    .ios-btn-secondary:active {
        background-color: #D1D1D6;
    }

    .ios-canvas-area {
        position: relative;
        width: calc(100% - 16px);
        height: calc(100% - 16px);
        margin: 8px;
        border: 1px solid #ccc;
        border-radius: 12px;
        background: white;
        box-shadow: 0 4px 12px rgb(0 0 0 / 33%);
    }

    .ios-box {
        position: absolute;
        border: 2px solid black;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .ios-box-selected {
        outline: 2px solid #007AFF;
    }

    .ios-history-panel {
        width: 40%;
        padding: 20px;
        position: fixed;
        display: flex;
        gap: 10px;
        background: transparent;
        right: 17px;
        top: 69px;
        max-height: 500px;
        pointer-events: none;
    }

    .ios-history-card {
        width: 100%;
    background: transparent;
    /* backdrop-filter: blur(1px); */
    border-radius: 12px;
    padding: 16px;
    /* border: 1px solid rgba(0, 0, 0, 0.08); */
    /* box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); */
    margin-bottom: 16px;
    pointer-events: none;
    opacity: 0.8;
    }

    .ios-history-title {
        font-weight: 600;
        margin-bottom: 12px;
        color: #3C3C43;
        font-size: 14px;
        display: flex;
        align-items: center;
    }

    .ios-history-list {
        font-family: monospace;
        font-size: 13px;
        color: #3C3C43;
        line-height: 1.6;
        max-height: 300px;
        overflow-y: auto;
        padding-right: 8px;
    }

    .ios-history-item {
        padding: 6px 0;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
    }

    .ios-bullet {
        color: #007AFF;
        margin-right: 6px;
        font-size: 10px;
    }
</style>

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<div class="ios-container">
    <!-- Left Panel - Canvas and Controls -->
    <div @onkeydown="HandleKey" tabindex="0" class="ios-canvas-panel">
        <!-- iOS Style Toolbar with Icon Buttons -->
        <div class="ios-toolbar">
            <!-- Creation Group -->
            <div class="ios-button-group">
                <button @onclick="AddBox" class="ios-btn ios-btn-primary" title="Add Box">
                    <i class="material-icons ios-btn-icon">add</i>
                </button>
            </div>

            <!-- Movement Group -->
            <div class="ios-button-group">
                <button @onclick="@(() => ExecuteIfSelected(box => new MoveBoxCommand(box, -10, 0), "move left"))"
                        class="ios-btn ios-btn-secondary" title="Move Left">
                    <i class="material-icons ios-btn-icon">arrow_left</i>
                </button>
                <button @onclick="@(() => ExecuteIfSelected(box => new MoveBoxCommand(box, 10, 0), "move right"))"
                        class="ios-btn ios-btn-secondary" title="Move Right">
                    <i class="material-icons ios-btn-icon">arrow_right</i>
                </button>
                <button @onclick="@(() => ExecuteIfSelected(box => new MoveBoxCommand(box, 0, 10), "move down"))"
                        class="ios-btn ios-btn-secondary" title="Move Down">
                    <i class="material-icons ios-btn-icon">arrow_downward</i>
                </button>
                <button @onclick="@(() => ExecuteIfSelected(box => new MoveBoxCommand(box, 0, -10), "move up"))"
                        class="ios-btn ios-btn-secondary" title="Move Up">
                    <i class="material-icons ios-btn-icon">arrow_upward</i>
                </button>
            </div>

            <!-- Size Group -->
            <div class="ios-button-group">
                <button @onclick="@(() => ExecuteIfSelected(box => new ResizeBoxCommand(box, box.Width + 10, box.Height + 10), "increase size"))"
                        class="ios-btn ios-btn-secondary" title="Increase Size">
                    <i class="material-icons ios-btn-icon">zoom_in</i>
                </button>
                <button @onclick="@(() => ExecuteIfSelected(box => new ResizeBoxCommand(box, box.Width - 10, box.Height - 10), "reduce size"))"
                        class="ios-btn ios-btn-secondary" title="Reduce Size">
                    <i class="material-icons ios-btn-icon">zoom_out</i>
                </button>
            </div>

            <!-- Styling Group -->
            <div class="ios-button-group">
                <button @onclick="@(() => ExecuteIfSelected(box => new ChangeColorCommand(box, "#e74c3c"), "change color"))"
                        class="ios-btn ios-btn-primary" title="Change Color">
                    <i class="material-icons ios-btn-icon">palette</i>
                </button>
                <button @onclick="@(() => ExecuteIfSelected(box => new ChangeBorderRadiusCommand(box, box.BorderRadius + 5), "increase border radius"))"
                        class="ios-btn ios-btn-secondary" title="Increase Radius">
                    <i class="material-icons ios-btn-icon">rounded_corner</i>
                </button>
                <button @onclick="@(() => ExecuteIfSelected(box => new ChangeBorderRadiusCommand(box, box.BorderRadius - 5), "reduce border radius"))"
                        class="ios-btn ios-btn-secondary" title="Reduce Radius">
                    <i class="material-icons ios-btn-icon">crop_square</i>
                </button>
            </div>

            <!-- History Group -->
            <div class="ios-button-group">
                <button @onclick="Undo" class="ios-btn ios-btn-secondary" title="Undo">
                    <i class="material-icons ios-btn-icon">undo</i>
                </button>
                <button @onclick="Redo" class="ios-btn ios-btn-secondary" title="Redo">
                    <i class="material-icons ios-btn-icon">redo</i>
                </button>
            </div>

        </div>

        <!-- Canvas Area -->
        <div class="ios-canvas-area">
            @foreach (var box in Boxes)
            {
                <div class="ios-box @(box == SelectedBox ? "ios-box-selected" : "")"
                     style="left:@($"{box.X}px"); top:@($"{box.Y}px"); width:@($"{box.Width}px"); height:@($"{box.Height}px"); background:@box.Color; border-radius:@($"{box.BorderRadius}px");"
                     type="button" @onclick="@(() => SelectedBox = box)"></div>
            }
        </div>
    </div>

    <!-- Floating History Panels (Right Side) -->
    <div class="ios-history-panel">
        <!-- Undo History Panel -->
        <div class="ios-history-card">
            <div class="ios-history-title">
                <span class="ios-bullet">↩</span>
                UNDO HISTORY
            </div>
            <div class="ios-history-list">
                @foreach (var x in CommandManager.UndoList)
                {
                    <div class="ios-history-item">
                        <span class="ios-bullet">•</span>
                        @x
                    </div>
                }
            </div>
        </div>

        <!-- Redo History Panel -->
        <div class="ios-history-card">
            <div class="ios-history-title">
                <span class="ios-bullet">↪</span>
                REDO HISTORY
            </div>
            <div class="ios-history-list">
                @foreach (var x in CommandManager.RedoList)
                {
                    <div class="ios-history-item">
                        <span class="ios-bullet">•</span>
                        @x
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Box> Boxes = new();  
    private Box? SelectedBox;  


    protected override void OnInitialized() 
    {  
        ShortcutManager.Register("a", () => SelectedBox != null ? new AddBoxCommand(Boxes, new Box { X = 50, Y = 50 },(b)=>SelectedBox = b) : null, "add box");

        ShortcutManager.Register("arrowdown", () => SelectedBox != null ? new MoveBoxCommand(SelectedBox, 0, 10) : null, "move down");
        ShortcutManager.Register("arrowup", () => SelectedBox != null ? new MoveBoxCommand(SelectedBox, 0, -10) : null, "move up");
        ShortcutManager.Register("arrowleft", () => SelectedBox != null ? new MoveBoxCommand(SelectedBox, -10, 0) : null ,"move left");
        ShortcutManager.Register("arrowright", () => SelectedBox != null ? new MoveBoxCommand(SelectedBox, 10, 0) : null, "move right");
        ShortcutManager.Register("c", () => SelectedBox != null ? new ChangeColorCommand(SelectedBox, "#e74c3c") : null, "change color red");
        ShortcutManager.Register("shift+c", () => SelectedBox != null ? new ChangeColorCommand(SelectedBox, "#3498db") : null, "change color blue");

        ShortcutManager.Register("r", () => SelectedBox != null ? new ChangeBorderRadiusCommand(SelectedBox, SelectedBox.BorderRadius + 5) : null, "increse border radius");
        ShortcutManager.Register("shift+r", () => SelectedBox != null ? new ChangeBorderRadiusCommand(SelectedBox, SelectedBox.BorderRadius - 5) : null, "reduce border radius");

        ShortcutManager.Register("s", () => SelectedBox != null ? new ResizeBoxCommand(SelectedBox, SelectedBox.Width + 10, SelectedBox.Height + 10) : null, "increse size");
        ShortcutManager.Register("shift+s", () => SelectedBox != null ? new ResizeBoxCommand(SelectedBox, SelectedBox.Width - 10, SelectedBox.Height - 10) : null, "reduce size");

        // Register Ctrl+Z for Undo and Ctrl+Y for Redo
        // ShortcutManager.Register("ctrl+z", () => new DelegateCommand(CommandManager.Undo));
        // ShortcutManager.Register("ctrl+y", () => new DelegateCommand(CommandManager.Redo));
    }  

    void AddBox()  
    {  
        var box = new Box { X = 50, Y = 50 };  
        var cmd = new AddBoxCommand(Boxes, box, (b) => SelectedBox = b);
        CommandManager.ExecuteCommand(cmd,"add command");  
    }  

    void Undo() => CommandManager.Undo();  
    void Redo() => CommandManager.Redo();  

    void HandleKey(KeyboardEventArgs e)  
    {

        var key = NormalizeKey(e);

        Console.WriteLine($"Key pressed: {key}");
        if(key == "ctrl+z")
        {
            CommandManager.Undo();
            return;
        }
        else if(key == "ctrl+y")
        {
            CommandManager.Redo();
            return;
        }
        var cmd = ShortcutManager.GetCommand(key);  
        if (cmd.Item1 != null)  
        {  
            CommandManager.ExecuteCommand(cmd.Item1,cmd.Item2);  
        }  
    }  

    private string NormalizeKey(KeyboardEventArgs e)
    {
        var parts = new List<string>();
        if (e.CtrlKey) parts.Add("ctrl");
        if (e.ShiftKey) parts.Add("shift");
        if (e.AltKey) parts.Add("alt");

        var key = e.Key.ToLower();

        // Normalize special keys
        key = key switch
        {
            " " => "space",
            "arrowup" => "arrowup",
            "arrowdown" => "arrowdown",
            "arrowleft" => "arrowleft",
            "arrowright" => "arrowright",
            _ => key
        };

        parts.Add(key);
        return string.Join("+", parts);
    }

    void ExecuteIfSelected(Func<Box, ICommand> commandFactory,string commandName)
    {
        if (SelectedBox != null)
        {
            var cmd = commandFactory(SelectedBox);
            CommandManager.ExecuteCommand(cmd, commandName);
        }
    }
}